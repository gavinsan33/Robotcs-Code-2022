{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nmotor1L = Motor(Ports.PORT10, GearSetting.RATIO_6_1, False)\nmotor2L = Motor(Ports.PORT2, GearSetting.RATIO_6_1, False)\nmotor1R = Motor(Ports.PORT1, GearSetting.RATIO_6_1, True)\nmotor2R = Motor(Ports.PORT4, GearSetting.RATIO_6_1, False)\nm5 = Motor(Ports.PORT3, GearSetting.RATIO_6_1, False)\nm6 = Motor(Ports.PORT6, GearSetting.RATIO_6_1, False)\nm7 = Motor(Ports.PORT7, GearSetting.RATIO_6_1, False)\nm8 = Motor(Ports.PORT8, GearSetting.RATIO_6_1, False)\ncontroller_1 = Controller(PRIMARY)\nsol_a = DigitalOut(brain.three_wire_port.a)\nsols = DigitalOut(brain.three_wire_port.b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      Control and Record 2022\n#\tAuthor:       Gavin Sanders\n#\tCreated:      October 2022\n#\tDescription:  Stores and replays controller input\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\n#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\nleftMotors = (motor1L, motor2L)\nrightMotors = (motor1R, motor2R)\n\nleftSpeed, rightSpeed = 1, 1\nprevLeftState, prevRightState = None, None\nlHorizAxisState, rHorizAxisState = 1, 1\nprevLHorizAxisState, PrevRHorizAxisState = None, None\n\nbutton_states = [False for i in range(12)]\nprev_button_states = [False for i in range(12)]\n\nrecordInput = False\n\nautonomous_start_offset = 0\nfirst_record = True\n\n#Paste recorded input here:\nRECORDED_INPUT = \"0&1&0&1&001000000000@0|0&1&0&1&000000000000@255|1&1&0&1&000000000000@935|5&1&0&1&000000000000@978|7&1&0&1&000000000000@999|7&1&2&1&000000000000@1020|9&1&3&1&000000000000@1042|10&1&3&1&000000000000@1063|10&1&7&1&000000000000@1084|10&1&12&1&000000000000@1106|11&1&13&1&000000000000@1169|14&1&13&1&000000000000@1276|15&1&13&1&000000000000@1297|16&1&13&1&000000000000@1318|16&1&14&1&000000000000@1339|19&1&19&1&000000000000@1361|20&1&19&1&000000000000@1382|20&1&21&1&000000000000@1425|20&1&23&1&000000000000@1446|20&1&29&1&000000000000@1467|19&1&33&1&000000000000@1510|20&1&46&1&000000000000@1531|20&1&48&1&000000000000@1573|19&1&48&1&000000000000@1595|19&1&47&1&000000000000@1637|20&1&44&1&000000000000@1680|20&1&32&1&000000000000@1701|21&1&25&1&000000000000@1744|25&1&21&1&000000000000@1765|25&1&19&1&000000000000@1786|29&1&15&1&000000000000@1807|32&1&14&1&000000000000@1850|33&1&13&1&000000000000@1871|33&1&11&1&000000000000@1893|33&1&2&1&000000000000@1914|33&1&0&1&000000000000@1935|35&1&0&1&000000000000@2020|37&1&0&1&000000000000@2041|37&1&1&1&000000000000@2275|37&1&11&1&000000000000@2296|35&1&21&1&000000000000@2318|35&1&23&1&000000000000@2339|34&1&23&1&000000000000@2360|32&1&23&1&000000000000@2382|29&1&24&1&000000000000@2424|29&1&23&1&000000000000@2445|29&1&22&1&000000000000@2509|29&1&23&1&000000000000@2573|27&1&23&1&000000000000@2594|25&1&22&1&000000000000@2616|24&1&23&1&000000000000@2637|20&1&23&1&000000000000@2701|18&1&23&1&000000000000@2722|14&1&23&1&000000000000@2743|11&1&23&1&000000000000@2764|11&1&22&1&000000000000@2807|11&1&23&1&000000000000@2849|12&1&23&1&000000000000@2871|12&1&22&1&000000000000@2913|12&1&23&1&000000000000@2935|18&1&23&1&000000000000@2977|18&1&24&1&000000000000@3020|18&1&23&1&000000000000@3041|18&1&24&1&000000000000@3083|18&1&23&1&000000000000@3126|18&1&24&1&000000000000@3147|18&1&23&1&000000000000@3169|18&1&22&1&000000000000@3296|18&1&23&1&000000000000@3317|18&1&24&1&000000000000@3339|16&1&23&1&000000000000@3360|4&1&23&1&000000000000@3402|2&1&23&1&000000000000@3445|0&1&23&1&000000000000@3466|0&1&25&1&000000000000@3488|0&1&29&1&000000000000@3509|0&1&30&1&000000000000@3573|0&1&29&1&000000000000@3594|0&1&30&1&000000000000@3679|0&1&29&1&000000000000@3721|0&1&30&1&000000000000@3743|0&1&25&1&000000000000@3785|0&1&6&1&000000000000@3828|0&1&0&1&000000000000@3870|2&1&0&1&010000000000@3892|10&1&0&1&010000000000@3913|12&1&0&1&010000000000@3934|11&1&0&1&010000000000@3977|12&1&0&1&010000000000@4019|10&1&0&1&010000000000@4083|2&1&-4&1&010000000000@4126|0&1&-19&1&000000000000@4147|0&1&-37&1&000000000000@4168|0&1&-44&1&000000000000@4190|0&1&-46&1&000000000000@4211|0&1&-43&1&000000000000@4275|0&1&-40&1&000000000000@4296|0&1&-25&1&000000000000@4317|0&1&0&1&000000000000@4339|0&1&6&1&000000000000@4721|0&1&8&1&000000000000@4742|0&1&12&1&000000000000@4764|0&1&14&1&000000000000@4785|0&1&17&1&000000000000@4828|0&1&15&1&000000000000@4849|0&1&17&1&000000000000@4870|5&1&18&1&000000000000@4913|7&1&18&1&000000000000@4934|7&1&12&1&000000000000@5083|7&1&0&1&000000000000@5104|8&1&-2&1&000000000000@5274|10&1&-3&1&000000000000@5295|13&1&-7&1&000000000000@5317|16&1&-7&1&000000000000@5338|18&1&-7&1&000000000000@5359|19&1&-4&1&000000000000@5402|19&1&0&1&000000000000@5423|18&1&0&1&000000000000@5529|19&1&0&1&000000000000@5614|18&1&0&1&000000000000@5636|15&1&0&1&000000000000@5678|14&1&2&1&000000000000@5699|12&1&3&1&000000000000@5721|10&1&6&1&000000000000@5742|7&1&8&1&000000000000@5763|5&1&9&1&000000000000@5785|3&1&10&1&000000000000@5827|0&1&11&1&000000000000@5848|0&1&12&1&000000000000@5870|0&1&14&1&000000000000@5891|0&1&13&1&000000000000@5912|0&1&12&1&000000000000@5976|0&1&13&1&000000000000@5997|0&1&12&1&000000000000@6040|0&1&13&1&000000000000@6061|0&1&14&1&000000000000@6082|0&1&13&1&000000000000@6125|0&1&8&1&000000000000@6210|0&1&0&1&000000000000@6231|4&1&0&1&000000000000@6550|7&1&0&1&000000000000@6614|12&1&11&1&000000000000@6635|14&1&18&1&000000000000@6678|14&1&20&1&000000000000@6699|14&1&21&1&000000000000@6720|15&1&23&1&000000000000@6741|15&1&25&1&000000000000@6763|15&1&26&1&000000000000@6784|15&1&28&1&000000000000@6805|15&1&26&1&000000000000@6848|16&1&28&1&000000000000@6869|22&1&28&1&000000000000@6890|29&1&28&1&000000000000@6912|30&1&28&1&000000000000@6933|30&1&26&1&000000000000@6975|29&1&28&1&000000000000@7039|25&1&26&1&000000000000@7060|11&1&26&1&000000000000@7082|0&1&28&1&000000000000@7124|0&1&26&1&000000000000@7188|0&1&25&1&000000000000@7252|0&1&21&1&000000000000@7273|0&1&20&1&000000000000@7294|0&1&18&1&000000000000@7316|0&1&15&1&000000000000@7337|7&1&11&1&000000000000@7358|15&1&9&1&000000000000@7401|18&1&10&1&000000000000@7443|19&1&9&1&000000000000@7465|18&1&4&1&000000000000@7507|11&1&2&1&000000000000@7550|3&1&0&1&000000000000@7571|1&1&0&1&000000000000@7592|2&1&0&1&000000000000@7614|8&1&0&1&000000000000@7656|12&1&0&1&000000000000@7699|20&1&0&1&000000000000@7720|30&1&0&1&000000000000@7741|41&1&0&1&000000000000@7762|43&1&0&1&000000000000@7784|27&1&0&1&000000000000@7869|20&1&0&1&000000000000@7890|16&1&0&1&000000000000@7911|15&1&0&1&000000000000@7933|12&1&0&1&000000000000@7975|11&1&0&1&000000000000@7996|9&1&0&1&000000000000@8124|2&1&0&1&000000000000@8145|0&1&0&1&000000000000@8166|0&1&0&1&010000000000@9038|0&1&0&1&000000000000@9400|0&1&0&1&100000000000@9570|0&1&0&1&000000000000@9953|0&1&0&1&001000000000@10675|0&1&0&1&000000000000@10952|-1&1&0&1&000000000000@11547|-7&1&-1&1&000000000000@11568|-12&1&-3&1&000000000000@11590|-13&1&-4&1&000000000000@11611|-14&1&-4&1&000000000000@11653|-18&1&-8&1&000000000000@11675|-19&1&-9&1&000000000000@11696|-26&1&-14&1&000000000000@11717|-28&1&-14&1&000000000000@11802|-26&1&-14&1&000000000000@11823|-28&1&-14&1&000000000000@11845|-28&1&-15&1&000000000000@11866|-28&1&-18&1&000000000000@11887|-26&1&-22&1&000000000000@11909|-28&1&-24&1&000000000000@11930|-26&1&-24&1&000000000000@12015|-11&1&-24&1&000000000000@12036|-7&1&-24&1&000000000000@12079|-3&1&-24&1&000000000000@12100|0&1&-24&1&000000000000@12164|0&1&-25&1&000000000000@12461|0&1&-24&1&000000000000@12504|0&1&-20&1&000000000000@12568|-10&1&-13&1&000000000000@12589|-18&1&-9&1&000000000000@12610|-19&1&-8&1&000000000000@12631|-26&1&-3&1&000000000000@12674|-31&1&0&1&000000000000@12717|-35&1&0&1&000000000000@12738|-36&1&0&1&000000000000@12823|-35&1&0&1&000000000000@12865|-35&1&-1&1&000000000000@12887|-35&1&-5&1&000000000000@12908|-35&1&-7&1&000000000000@12929|-35&1&-8&1&000000000000@12972|-31&1&-7&1&000000000000@13014|-29&1&-7&1&000000000000@13036|-23&1&-8&1&000000000000@13078|-20&1&-7&1&000000000000@13099|-14&1&-8&1&000000000000@13142|-10&1&-8&1&000000000000@13163|-7&1&-10&1&000000000000@13184|-3&1&-11&1&000000000000@13206|-1&1&-13&1&000000000000@13248|0&1&-15&1&000000000000@13270|0&1&-18&1&000000000000@13291|-1&1&-18&1&000000000000@13567|0&1&-18&1&000000000000@13610|-1&1&-18&1&000000000000@13673|0&1&-18&1&000000000000@13716|-1&1&-18&1&000000000000@13737|-6&1&-18&1&000000000000@13822|-7&1&-18&1&000000000000@13844|-11&1&-18&1&000000000000@13865|-10&1&-18&1&000000000000@13886|-13&1&-18&1&000000000000@13907|-14&1&-18&1&000000000000@13950|-15&1&-18&1&000000000000@14120|-17&1&-18&1&000000000000@14141|-19&1&-18&1&000000000000@14163|-21&1&-18&1&000000000000@14184|-20&1&-18&1&000000000000@14248|-21&1&-18&1&000000000000@14269|-20&1&-18&1&000000000000@14290|-21&1&-18&1&000000000000@14375|-20&1&-18&1&000000000000@14418|-21&1&-18&1&000000000000@14482|-20&1&-18&1&000000000000@14524|-21&1&-18&1&000000000000@14673|-19&1&-18&1&000000000000@14694|-20&1&-18&1&000000000000@14715|-21&1&-18&1&000000000000@14949|-20&1&-18&1&000000000000@14970|-21&1&-18&1&000000000000@15119|-20&1&-18&1&000000000000@15141|-21&1&-18&1&000000000000@15162|-20&1&-18&1&000000000000@15183|-21&1&-18&1&000000000000@15226|-20&1&-18&1&000000000000@15332|-21&1&-18&1&000000000000@15417|-20&1&-18&1&000000000000@15438|-21&1&-18&1&000000000000@15502|-20&1&-18&1&000000000000@15545|-21&1&-18&1&000000000000@15587|-20&1&-18&1&000000000000@15651|-21&1&-18&1&000000000000@15693|-19&1&-18&1&000000000000@15736|-20&1&-18&1&000000000000@15757|-21&1&-18&1&000000000000@15800|-20&1&-18&1&000000000000@15821|-21&1&-18&1&000000000000@15864|-20&1&-18&1&000000000000@15885|-21&1&-18&1&000000000000@15970|-20&1&-18&1&000000000000@15991|-21&1&-18&1&000000000000@16012|-20&1&-18&1&000000000000@16119|-21&1&-18&1&000000000000@16182|-18&1&-18&1&000000000000@16225|-11&1&-11&1&000000000000@16246|0&1&0&1&000000000000@16268|0&1&0&1&010000000000@18116|0&1&0&1&000000000000@18436|\"\n##############\n\nm5.set_stopping(HOLD)\nm6.set_stopping(HOLD)\nm7.set_stopping(HOLD)\nm8.set_stopping(HOLD)\n\ndef move(l, r, a2=0, a1=0):\n    global button_states\n\n    if(l > 0):\n        for motor in leftMotors:\n            motor.spin(FORWARD)\n            motor.set_velocity(l, PERCENT)\n\n    elif(l < 0):\n        for motor in leftMotors:\n            motor.spin(REVERSE)\n            motor.set_velocity(l, PERCENT)\n    else:\n        for motor in leftMotors:\n            motor.stop()\n    \n    if(r > 0):\n        for motor in rightMotors:\n            motor.spin(FORWARD)\n            motor.set_velocity(r, PERCENT)\n    elif(r < 0):\n        for motor in rightMotors:\n            motor.spin(REVERSE)\n            motor.set_velocity(r, PERCENT)\n    else:\n        for motor in rightMotors:\n            motor.stop()\n    \n    # EXAMPLE OF HOW TO SET BUTTON TO MOTOR\n    #button order: l1[0], l2[1], r1[2], r2[3], up[4], right[5], down[6], left[7], x[8], a[9], b[10], y[11]\n\n    if(button_states[0] == True):\n        m5.spin(FORWARD)\n        m5.set_velocity(80, PERCENT)\n    elif(button_states[1] == True):\n        m5.spin(REVERSE)\n        m5.set_velocity(-80, PERCENT)\n    else:\n        m5.stop()\n    \n\n    if(button_states[2] == True):\n        m8.spin(FORWARD)\n        m8.set_velocity(80, PERCENT)\n    elif(button_states[3] == True):\n        m8.spin(REVERSE)\n        m8.set_velocity(-80, PERCENT)\n    else:\n        m8.stop()\n    \n    # EXAMPLE OF HOW TO SET BUTTON TO SOLENOID\n    sol_a.set(button_states[8])\n\n#CHANGE FOR OTHER AXES\ndef somethingChanged():\n    if(leftSpeed != prevLeftState or rightSpeed != prevRightState or button_states != prev_button_states):\n        return True\n    return False\n\ndef record():\n    global first_record\n    global autonomous_start_offset\n    if(first_record):\n        autonomous_start_offset = int(brain.timer.time(MSEC))\n        first_record = not first_record\n    print(str(leftSpeed) + \"&\" + str(lHorizAxisState) + \"&\" + str(rightSpeed) + \"&\" + str(rHorizAxisState)  + \"&\" + str(int(button_states[0])) + str(int(button_states[1])) + str(int(button_states[2])) + str(int(button_states[3])) + str(int(button_states[4]))\n    + str(int(button_states[5])) + str(int(button_states[6])) + str(int(button_states[7])) + str(int(button_states[8])) + str(int(button_states[9])) + str(int(button_states[10])) + str(int(button_states[11])) + \"@\" + str(int(brain.timer.time(MSEC)) - autonomous_start_offset) + \"|\", end=\"\")\n\n#######################################\ndef pre_autonomous():\n    # actions to do when the program starts\n    wait(1, SECONDS)\n#########################################\ndef autonomous():\n    global button_states\n\n    for i in range(len(button_states)):\n        button_states[i] = False\n\n    startIndex = 0\n    startTime = int(brain.timer.time(MSEC))\n\n    while(startIndex < len(RECORDED_INPUT)):\n        chunk = RECORDED_INPUT[startIndex : RECORDED_INPUT.index(\"|\", startIndex)]\n        #LEFT VERTICAL AXIS\n        andIndex1 = chunk.index(\"&\")\n        a3 = int(chunk[0 : andIndex1])\n\n        andIndex2 = chunk.index(\"&\", andIndex1 + 1)\n        a4 = int(chunk[andIndex1 + 1 : andIndex2])\n\n        #RIGHT VERTICAL AXIS\n        andIndex3 = chunk.index(\"&\", andIndex2 + 1)\n        a2 =int(chunk[andIndex2 + 1 : andIndex3])\n        rightaxis = a2\n\n        andIndex4 = chunk.index(\"&\", andIndex3 + 1)\n        a1 = int(chunk[andIndex3 + 1 : andIndex4])\n\n        l1 = chunk[andIndex4 + 1 : andIndex4 + 2]\n        l2 = chunk[andIndex4 + 2 : andIndex4 + 3]\n        r1 = chunk[andIndex4 + 3 : andIndex4 + 4]\n        r2 = chunk[andIndex4 + 4 : andIndex4 + 5]\n        up = chunk[andIndex4 + 5 : andIndex4 + 6]\n        right = chunk[andIndex4 + 6 : andIndex4 + 7]\n        down = chunk[andIndex4 + 7 : andIndex4 + 8]\n        left = chunk[andIndex4 + 8 : andIndex4 + 9]\n        X = chunk[andIndex4 + 9 : andIndex4 + 10]\n        A = chunk[andIndex4 + 10 : andIndex4 + 11]\n        B = chunk[andIndex4 + 11 : andIndex4 + 12]\n        Y = chunk[andIndex4 + 12 : andIndex4 + 13]\n\n        buttons = [l1, l2, r1, r2, up, right, down, left, X, A, B, Y]\n        \n        atIndex = chunk.index(\"@\")\n        milliseconds = int(chunk[(atIndex + 1) : len(chunk)])\n        \n        startIndex += (len(chunk) + 1)\n\n        while(True):\n            if(milliseconds <= int(brain.timer.time(MSEC) - startTime)):\n                for i in range(len(buttons)):\n                    button_states[i] = bool(int(buttons[i]))\n\n                move(a3, a2)\n                #print(\"L: \" + str(a3) + \" R: \" + str(a2))\n                break\n            \n\n\n##########################################   \n\ndef user_control():\n    global leftSpeed\n    global rightSpeed\n    global recordInput\n    global prevLeftState\n    global prevRightState\n    global prev_button_states\n    global button_states\n\n    #button order: l1[0], l2[1], r1[2], r2[3], up[4], right[5], down[6], left[7], x[8], a[9], b[10], y[11]\n    while(True):   \n        leftSpeed = controller_1.axis3.position()\n        rightSpeed = controller_1.axis2.position()\n        other1 = controller_1.axis4.position()\n        other2 = controller_1.axis1.position()\n        \n        if(controller_1.buttonUp.pressing()):\n            recordInput = not(recordInput)\n            \n            if(recordInput):\n                controller_1.screen.print(\"RECORDING\")\n            else:\n                controller_1.screen.clear_screen()\n            \n            wait(200, MSEC)\n            \n\n        #MOVE MOTOR WITH SHOULDER BUTTONS\n        if(controller_1.buttonL1.pressing()):\n            button_states[0] = True\n        else:\n            button_states[0] = False\n        \n        if(controller_1.buttonL2.pressing()):\n            button_states[1] = True\n        else:\n            button_states[1] = False\n        \n\n        if(controller_1.buttonR1.pressing()):\n            button_states[2] = True\n        else:\n            button_states[2] = False\n        \n        if(controller_1.buttonR2.pressing()):\n            button_states[3] = True\n        else:\n            button_states[3] = False\n\n\n        move(leftSpeed, rightSpeed)\n\n        if(somethingChanged()):\n            prevLeftState = leftSpeed\n            prevRightState = rightSpeed\n            prev_button_states = button_states.copy()\n            \n            if(recordInput):\n                record()\n\n        wait(20, MSEC)\n\n#########################################\n\n# create competition instance\ncomp = Competition(user_control, autonomous)\n\n###DELETE THIS FOR COMPETITION###\n# autonomous()\n#################################\n","textLanguage":"python","rconfig":[{"port":[10],"name":"motor1L","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[2],"name":"motor2L","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[1],"name":"motor1R","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[4],"name":"motor2R","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[3],"name":"m5","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[6],"name":"m6","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[7],"name":"m7","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[8],"name":"m8","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"sol_a","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"sols","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}