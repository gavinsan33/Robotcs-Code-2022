{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nmotor1L = Motor(Ports.PORT1, GearSetting.RATIO_6_1, True)\nmotor2L = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)\nmotor1L.spin(FORWARD, 10.0, VOLT)\n\nmotor1R = Motor(Ports.PORT3, GearSetting.RATIO_6_1, False)\nmotor2R = Motor(Ports.PORT4, GearSetting.RATIO_6_1, False)\nsol_a = DigitalOut(brain.three_wire_port.a)\narmMotor_motor_a = Motor(Ports.PORT5, GearSetting.RATIO_6_1, False)\narmMotor_motor_b = Motor(Ports.PORT6, GearSetting.RATIO_6_1, True)\narmMotor = MotorGroup(armMotor_motor_a, armMotor_motor_b)\ncontroller_1 = Controller(PRIMARY)\narmMotor2 = Motor(Ports.PORT7, GearSetting.RATIO_6_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\n#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:\n#\tAuthor:\n#\tCreated:\n#\tConfiguration:\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\nleftMotors = (motor1L, motor2L)\nrightMotors = (motor1R, motor2R)\n\nmotorSpeed = 1\noffset = 1\n\nprevMotorState = None\nprevOffset = None\n\nbuttonX = False\n\nrecordInput = False\n\narmMotorState = 0\nprevArmMotorState = 0\n\narmMotorState2 = 0\nprevArmMotorState2 = 0\n\n#Paste recorded input here:\nRECORDED_INPUT = \"\"\n##############\n\narmMotor.set_stopping(HOLD)\narmMotor2.set_stopping(HOLD)\n\ndef move(base, rStick, a, a2):\n    \n    sub = int(rStick / 2)\n    \n    LM = base\n    RM = base\n\n    if(base > 0):\n        if(sub > 0):\n            LM = base\n            RM = base - sub\n        elif(sub < 0):\n            LM = base + sub\n            RM  = base\n   \n    elif(base < 0):\n        if(sub > 0):\n            LM = base + sub\n            RM = base \n        elif(sub < 0):\n            LM = base \n            RM  = base - sub\n    \n    \n    if(LM > 0):\n        for motor in leftMotors:\n            motor.spin(FORWARD)\n            motor.set_velocity(LM, PERCENT)\n    elif(LM < 0):\n        for motor in leftMotors:\n            motor.spin(REVERSE)\n            motor.set_velocity(LM, PERCENT)  \n        \n    else:\n        for motor in leftMotors:\n            motor.stop()  \n\n    if(RM > 0):\n        for motor in rightMotors:\n            motor.spin(FORWARD)\n            motor.set_velocity(RM, PERCENT)\n    elif(RM < 0):\n        for motor in rightMotors:\n            motor.spin(REVERSE)\n            motor.set_velocity(RM, PERCENT)  \n    else:\n        for motor in rightMotors:\n            motor.stop()  \n    \n    if(base == 0):\n        if(sub > 0):\n            for motor in leftMotors:\n                motor.spin(FORWARD)\n                motor.set_velocity(int(sub / 2), PERCENT)\n            \n            for motor in rightMotors:\n                motor.spin(REVERSE)\n                motor.set_velocity(-1 * int(sub / 2), PERCENT)\n        \n        elif(sub < 0):\n            for motor in leftMotors:\n                motor.spin(REVERSE)\n                motor.set_velocity(int(sub / 2), PERCENT)\n            \n            for motor in rightMotors:\n                motor.spin(FORWARD)\n                motor.set_velocity(-1 * int(sub / 2), PERCENT)\n    \n    \n    if(a > 0):\n        armMotor.spin(FORWARD)\n        armMotor.set_velocity(100, PERCENT)\n    elif(a < 0):\n        armMotor.spin(REVERSE)\n        armMotor.set_velocity(-100, PERCENT)\n    else:\n        armMotor.stop()\n\n    if(a2 > 0):\n        armMotor2.spin(FORWARD)\n        armMotor2.set_velocity(75, PERCENT)\n    elif(a2 < 0):\n        armMotor2.spin(REVERSE)\n        armMotor2.set_velocity(-75, PERCENT)\n    else:\n        armMotor2.stop()\n    \n    \n    \ndef somethingChanged():\n\n    if(((motorSpeed == prevMotorState) and (offset == prevOffset))):\n        if((prevArmMotorState != armMotorState) or ((prevArmMotorState2 != armMotorState2))):\n            return True\n        return False\n    \n    return True\n\ndef record(button):\n    print(str(motorSpeed) + \"&\" + str(offset) + \"@\" + str(brain.timer.time()) + button + \"|\", end=\"\")\n\n#######################################\ndef pre_autonomous():\n    # actions to do when the program starts\n    brain.screen.clear_screen()\n    brain.screen.print(\"pre auton code\")\n    wait(1, SECONDS)\n#########################################\ndef autonomous():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    # place automonous code here\n\n    startIndex = 0\n    startTime = brain.timer.time(MSEC)\n    buttonX = False\n   \n    \n    while(startIndex < len(RECORDED_INPUT)):\n        totalMove = RECORDED_INPUT[startIndex : RECORDED_INPUT.index(\"|\", startIndex)]\n        andIndex = totalMove.index(\"&\")\n        leftMove = int(totalMove[0 : andIndex])\n        atIndex = totalMove.index(\"@\")\n        rightMove = int(totalMove[(andIndex + 1) : atIndex])\n        milliseconds = int(totalMove[(atIndex + 1) : len(totalMove) - 1])\n        button = totalMove[len(totalMove) - 1]\n        startIndex +=  (len(totalMove) + 1)\n\n        \n        while(True):\n            if(milliseconds == (brain.timer.time(MSEC) - startTime)):\n                if(button == \"r\"):\n                    move(leftMove, rightMove, 1, 0)\n                elif(button == \"l\"):\n                    move(leftMove, rightMove, -1, 0)\n                else:\n                    move(leftMove, rightMove, 0, 0)\n                \n                if(button == \"X\"):\n                    buttonX = not buttonX\n                    sol_a.set(buttonX)\n                    \n                \n                #print(\"L: \" + str(leftMove) + \" R: \" + str(rightMove) + \" button: \" + button)\n                break\n            \n\n\n##########################################   \n\ndef user_control():\n    brain.screen.clear_screen()\n    # place driver control in this while loop\n    global buttonX\n    global recordInput\n\n    while(True):   \n        motorSpeed = controller_1.axis3.position()\n        offset = controller_1.axis1.position()\n        \n        if(controller_1.buttonUp.pressing()):\n                \n                recordInput = not recordInput\n                \n                if(recordInput):\n                    controller_1.screen.print(\"RECORDING\")\n                else:\n                    controller_1.screen.clear_screen()\n                wait(200, MSEC)\n                \n        if(controller_1.buttonX.pressing()):\n            \n            buttonX = not buttonX\n            sol_a.set(buttonX)\n\n            if(recordInput):\n                record(\"X\")\n            wait(200, MSEC)\n\n        if(controller_1.buttonL1.pressing()):\n            armMotorState = 1\n        elif(controller_1.buttonR1.pressing()):\n            armMotorState = -1\n        else:\n            armMotorState = 0\n\n        if(controller_1.buttonL2.pressing()):\n            armMotorState2 = 1\n        elif(controller_1.buttonR2.pressing()):\n            armMotorState2 = -1\n        else:\n            armMotorState2 = 0\n\n        if(somethingChanged()):\n            \n            move(motorSpeed, offset, armMotorState, armMotorState2)\n            prevMotorState = motorSpeed\n            prevOffset = offset\n            \n            if(recordInput):\n                if(armMotorState == 1):\n                    record(\"r\")\n                elif(armMotorState == -1):\n                    record(\"l\")\n                else:\n                    record(\"-\")\n        \n        prevArmMotorState = armMotorState  \n        prevArmMotorState2 = armMotorState2\n        wait(20, MSEC)\n\n#########################################\n\n# create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n\n###DELETE THIS FOR COMPETITION###\n#user_control()\n#################################\n","textLanguage":"python","rconfig":[{"port":[1],"name":"motor1L","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[2],"name":"motor2L","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[3],"name":"motor1R","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[4],"name":"motor2R","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[1],"name":"sol_a","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[5,6],"name":"armMotor","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[7],"name":"armMotor2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.5","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}